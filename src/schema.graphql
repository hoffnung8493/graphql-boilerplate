type Query {
    users(query: String):[User!]!
    me:User!
}
# type Subscription{
    
# }
type Mutation {
    logIn(data:logInInput!):AuthPayload!
    createUser(data: CreateUserInput):AuthPayload!
    deleteUser:User!
    updateUser(data: UpdateUserInput):User!
}

input logInInput {
    email: String!, 
    password: String!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name:String!, 
    email:String!, 
    password: String!
}
input UpdateUserInput {
    name:String
    email:String
    password:String
}
type User {
    id: ID!
    name:String!
    password: String!
    email:String
}
enum MutationType {
    CREATED
    UPDATED
    DELETED
}